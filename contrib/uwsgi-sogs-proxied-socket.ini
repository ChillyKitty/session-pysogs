# uwsgi configuration for using with a front end reverse proxy via a unix socket; this is the
# recommended base configuration for all but the simplest setups, but requires some extra initial
# setup.
#
# Configuration requires:
# - change the chdir= and uid= values to the path/user where the script should run.  The path you
#   specify in `chdir=` should be owned by this user.
#
# - change gid, if necessary; this is typically the group that the web server runs as (might be
#   `nginx` or `www-data`).
#
# - tweak the `processes` argument, if desired and you have more than 2 cores and expect a very busy
#   SOGS.
#
# - if using uwsgi in vassal mode then put the configuration file into /etc/uwsgi/vassals
#
# - set up the front-end reverse proxy.  For nginx this means setting up a basic site configuration
#   like this (changing USER to the appropriate value):
#
#   server {
#       server_name mysite.com;  # add _ here to make it the default if this is the only site being served
#       location / {
#           proxy_set_header X-Real-IP $remote_addr;
#           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#           proxy_set_header Host $host;
#           include /etc/nginx/uwsgi_params;
#           uwsgi_pass unix:///home/USER/session-pysogs/sogs.wsgi;
#       }
#   }
#
#   For Apache enable the `proxy_uwsgi` module (`sudo a2enmod proxy_uwsgi` on Debian/Ubuntu systems)
#   and add this directive inside the <VirtualHost> section for the site (change USER
#   appropriately):
#
#      ProxyPass / unix:/home/USER/session-pysogs/sogs.wsgi|uwsgi://uwsgi-session-pysogs/
#

[uwsgi]
chdir = /home/USER/session-pysogs
uid = USER
gid = www-data
socket = sogs.wsgi
chmod-socket = 660
plugins = python3
processes = 2
enable-threads = true
manage-script-name = true
mount = /=sogs.web:app
mule = sogs.mule:run
log-4xx = true
log-5xx = true
disable-logging = true
